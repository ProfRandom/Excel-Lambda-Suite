/* TEMP_CF:

Converts Celcius temperature to Fahrenheit temperature
*/

TEMP_CF = LAMBDA(C, [precision],

LET(
    precision, if((ISOMITTED(precision))+(precision<0), 3, precision),
    round(C * (9 / 5) + 32, precision)
    )   
);

/* TEMP_FC:

Converts Fahrenheit temperature to Celsius temperature
*/

TEMP_FC = LAMBDA(F, [precision],

LET(
    precision, if((ISOMITTED(precision))+(precision<0), 3, precision),
    round((F - 32) * (5 / 9), precision)
    )
);

FOOTINCH = LAMBDA(input, [precision],
    LET(
        precision, IF(ISOMITTED(precision), 3, precision),
        feet, QUOTIENT(input, 1),
        mant, MOD(input, 1),
        decimal_inch, ROUND(mant * 12, precision),
        feet & CHAR(39) & CHAR(32) & decimal_inch & CHAR(34)
    )
);

FOOT_INCH = LAMBDA(input, [style], [denom], [precision],
    LET(
        style, IF((ISOMITTED(style)) * (style > 1), 0, style),
        denom, IF(ISOMITTED(denom), 16, TRUNC(denom)),
        precision, IF(ISOMITTED(precision), 3, precision),
        feet, QUOTIENT(input, 1),
        feet_mant, MOD(input, 1),
        decimal_inch, ROUND(feet_mant * 12, precision),
        inch_int, TRUNC(decimal_inch),
        inch_dec, decimal_inch - inch_int,
        inch_numer, TRUNC(inch_dec * denom),
        comfact, GCD(inch_numer, denom),
        numerfinal, inch_numer / comfact,
        denomfinal, denom / comfact,
        test, MOD(inch_numer, denom),
        frac_inch, IF(test <> 0, numerfinal & "/" & denomfinal, ""),
        int_inch, IF(inch_int = 0, "", inch_int),
        combo, IFS(
            AND(int_inch = "", frac_inch = ""),
            feet & CHAR(39),
            AND(int_inch = "", frac_inch <> ""),
            feet & CHAR(39) & CHAR(32) & int_inch & frac_inch & CHAR(34),
            AND(int_inch <> "", frac_inch <> ""),
            feet & CHAR(39) & CHAR(32) & int_inch & "-" & frac_inch & CHAR(34),
            TRUE,
            feet & CHAR(39) & CHAR(32) & int_inch & CHAR(34)
        ),
        standard, feet & CHAR(39) & CHAR(32) & decimal_inch & CHAR(34),
        /*numerfinal&" "&denomfinal&" "&gcd(inch_numer,denom)&" "&comfact*/
        output, SWITCH(style, 0, standard, 1, combo),
        output
    )
);

FRACTIONAL_INCH = LAMBDA(input,
    LET(
        list, {2, 4, 8, 16, 32},
        prec, 1,
        inch_mant, MOD(input, 1),
        result, TEXT(inch_mant, "?/32"),
        test, VALUE(TEXTAFTER(result, "/")),
        denom, XLOOKUP(test, list, list, , -1),
        inch, QUOTIENT(input, 1),
        inch_numer, TRUNC(inch_mant * denom),
        comfact, GCD(inch_numer, denom),
        numerfinal, inch_numer / comfact,
        denomfinal, denom / comfact,
        check, MOD(inch_numer, denom),
        frac_inch, IF(check <> 0, numerfinal & "/" & denomfinal, ""),
        output, IF(
            OR(inch_numer = 0, test = 1),
            inch & CHAR(34),
            IF(inch <> 0, inch & "-" & frac_inch & CHAR(34), frac_inch & CHAR(34))
        ),
        output
    )
);

INCH_CONVERT = LAMBDA(input, [denom],
    LET(
        denom, IF(ISOMITTED(denom), 32, TRUNC(denom)),
        inch, QUOTIENT(input, 1),
        inch_mant, MOD(input, 1),
        inch_numer, TRUNC(inch_mant * denom),
        comfact, GCD(inch_numer, denom),
        numerfinal, inch_numer / comfact,
        denomfinal, denom / comfact,
        test, MOD(inch_numer, denom),
        frac_inch, IF(test <> 0, numerfinal & "/" & denomfinal, ""),
        output, IF(inch_numer = 0, inch & CHAR(34), inch & "-" & frac_inch & CHAR(34)),
        output
    )
);
