/* LIST_REMOVE_BLANKS
   Purpose:
   Removes blank or empty values from a vertical list (single-column range or array).

   Inputs:
   - col : A single-column array or range

   Behavior:
   - Returns all non-blank (non-`""`) values from the column
   - Does not remove entries containing only whitespace (e.g., `" "`)

   Notes:
   - Input must be a vertical list (single column)
   - Use LIST_REMOVE_BLANK_ROWS for multi-column or full-table whitespace handling
*/

LIST_REMOVE_BLANKS = LAMBDA(col,
    FILTER(col, col <> "")
);

/* LIST_REMOVE_BLANK_ROWS
   Purpose:
   Removes fully blank rows from a 2D table (or single-column list).
   A row is considered blank if all cells are empty or contain only whitespace.

   Inputs:
   - tbl : A 2D array (or single-column range) representing a table

   Behavior:
   - Uses BYROW to evaluate each row's total non-whitespace content
   - Keeps rows where the sum of trimmed cell lengths is greater than zero
   - Returns the table with all empty rows removed

   Notes:
   - Works with tables of any width
   - Can safely be used on single-column lists as a more general alternative to LIST_REMOVE_BLANKS
*/

LIST_REMOVE_BLANK_ROWS = LAMBDA(tbl,
    LET(
        // Determine which rows contain any non-whitespace characters
        keep, BYROW(tbl, LAMBDA(r, SUM(LEN(TRIM(r))) > 0)),
        // Filter out rows where all columns are empty or whitespace-only
        FILTER(tbl, keep)
    )
)
;


/* LIST_FILTER_WILDCARD
   Purpose:
   Filters items from an array using a partial match string (with or without wildcards).

   Inputs:
   - array : The array to filter (can be 1D or 2D)
   - find  : The search string to match against items in the array
   - mode  : [optional] Match mode (defaults to 0)
       0 = match if 'find' appears anywhere in the value (SEARCH-based, case-insensitive)
       1 = match if value starts with 'find'
       2 = match if value contains 'find' using wildcard logic (asterisk-match)

   Behavior:
   - Mode 0 uses SEARCH(find, value): good for case-insensitive "contains"
   - Mode 1 and 2 use XLOOKUP with wildcard patterns via BYROW to handle
     complex matches in structured arrays
   - Returns "None" if no matches found

   Notes:
   - Mode 2 supports more precise wildcard matching (e.g., "x*ing")
   - Works on both vertical and horizontal arrays (internally row-wise)
   - Match is not case-sensitive

   Examples:
   LIST_FILTER_WILDCARD(A2:A20, "cat")         → returns all items containing "cat"
   LIST_FILTER_WILDCARD(A2:A20, "cat", 1)      → returns all items starting with "cat"
   LIST_FILTER_WILDCARD(A2:A20, "cat", 2)      → returns all wildcard matches like "cat*", "*cat*", etc.
*/

LIST_FILTER_WILDCARD = LAMBDA(array, find, [mode],
  LET(
    // Normalize and validate mode input
    mode, IF(OR(ISOMITTED(mode), mode > 2), 0, mode),

    // Determine output based on mode
    output, IFERROR(
      SWITCH(
        mode,
        // Mode 0: general partial match using SEARCH
        0, FILTER(array, ISNUMBER(SEARCH(find, array))),

        // Mode 2: wildcard pattern match (contains)
        2, FILTER(array, (BYROW(array,
              LAMBDA(x, XLOOKUP("*" & find, x, x, "", 2))
            ) <> "")),

        // Mode 1: wildcard "starts with"
        1, FILTER(array, (BYROW(array,
              LAMBDA(x, XLOOKUP(find & "*", x, x, "", 2))
            ) <> ""))
      ),
      // Fallback result if no matches
      "None"
    ),

    output
  )
)
;


/* LIST_DUPES_TABLE
   Purpose:
   Returns a two-column array of values that appear more than once in a list,
   along with their counts.

   Inputs:
   - list : A 1D or 2D range of values

   Behavior:
   - Flattens the input to a single-column list
   - Counts each unique value
   - Filters only those with a count > 1
   - Output format: {value, count}

   Example:
   LIST_DUPES_TABLE(A1:C10) →
     {"apple", 2;
      "banana", 3}
*/

LIST_DUPES_TABLE = LAMBDA(list,
  LET(
    flat, TOCOL(list, 3),
    arr_unique, UNIQUE(flat),
    arr_counts, MAP(arr_unique, LAMBDA(x, COUNTIF(flat, x))),
    arr_dupes, HSTACK(arr_unique, arr_counts),
    output, FILTER(arr_dupes, INDEX(arr_dupes,,2) > 1),
    output
  )
)
;


/* LIST_COUNTEACH_MODE
   Purpose:
   Counts how many times each unique item appears in the list.
   Optional parameters allow sorting and selective output formatting.

   Inputs:
   - range      : Array to analyze
   - [sortMode] : Optional. How to sort the result
       0 = by label ascending (default)
       1 = by count descending
       2 = no sorting
   - [outputMode]: Optional. Controls format
       0 = {label, count} (default)
       1 = labels only
       2 = counts only

   Output:
   - By default, returns a two-column array: {value, count}
   - Can also return just the values or just the counts

   Example:
   LIST_COUNTEACH_MODE(A1:A10)                  → {"apple", 3; "banana", 2}
   LIST_COUNTEACH_MODE(A1:A10, 1)               → sorted by count
   LIST_COUNTEACH_MODE(A1:A10, 1, 2)            → counts only, sorted by frequency
*/

LIST_COUNTEACH_MODE = LAMBDA(range, [sortMode], [outputMode],
  LET(
    sortMode, IF(ISOMITTED(sortMode), 0, sortMode),
    outputMode, IF(ISOMITTED(outputMode), 0, outputMode),

    // Get unique values and their counts
    values, UNIQUE(TOROW(range, 1)),
    counts, MAP(values, LAMBDA(x, COUNTIF(range, x))),

    // Sort as specified
    sortedValues, SWITCH(
      sortMode,
      0, SORTBY(values, values, 1),
      1, SORTBY(values, counts, -1),
      2, values,
      values
    ),
    sortedCounts, XLOOKUP(sortedValues, values, counts),

    // Choose output format
    output, SWITCH(
      outputMode,
      1, sortedValues,
      2, sortedCounts,
      CHOOSE({1,2}, sortedValues, sortedCounts)
    ),

    output
  )
)
;


/* LIST_FORMAT_AS_STRING
   Purpose:
   Formats a list as a delimited string with optional control over uniqueness, sorting, and braces.

   Inputs:
   - range      : Array or list to format
   - delimiter  : The character to place between items (e.g., ",", ";", ":", "|")
   - opts       : [optional] Semicolon-delimited key=value string of flags

   Supported Options (case-insensitive):
   - unique=true|false     : Return only unique values (default: false)
   - sort=true|false       : Sort values alphabetically (default: false)
   - braces=true|false     : Wrap result in curly braces (default: true)

   Examples:
   LIST_FORMAT_AS_STRING(A1:A10, ",", "unique=true;sort=true;braces=false")
   LIST_FORMAT_AS_STRING(B1:B5, ";", "sort=true")
   LIST_FORMAT_AS_STRING(C1:C20, ":", "")        // default options with colon separator
*/

LIST_FORMAT_AS_STRING = LAMBDA(range, delimiter, [opts],
  LET(
    opts, IF(ISOMITTED(opts), "", LOWER(opts)),

    // Option parsing
    do_sort, ISNUMBER(SEARCH("sort=true", opts)),
    do_unique, ISNUMBER(SEARCH("unique=true", opts)),
    show_braces, NOT(ISNUMBER(SEARCH("braces=false", opts))),

    // Prepare the list
    list_raw, TOCOL(range, 3),
    list_filtered, IF(do_unique, UNIQUE(list_raw), list_raw),
    list_final, IF(do_sort, SORT(list_filtered), list_filtered),

    // Assemble result
    joined, TEXTJOIN(delimiter, , list_final),
    output, IF(show_braces, "{" & joined & "}", joined),

    output
  )
)
;


/* LIST_COPY_REVERSE
   Purpose:
   Reverses a list vertically (default) or horizontally using keyword-based mode input.

   Inputs:
   - range : List or array to reverse
   - opts  : [optional] Mode string ("horizontal=true", "mode=horizontal", etc.)

   Behavior:
   - Default: reverses a single-column array (vertical mode)
   - If "horizontal=true" or "mode=horizontal" is detected in opts, reverses row-style list
   - Does NOT skip last item in horizontal mode (fixed from prior logic)

   Examples:
   LIST_COPY_REVERSE(A1:A10)
   LIST_COPY_REVERSE(1:1, "horizontal=true")
*/

LIST_COPY_REVERSE = LAMBDA(range, [opts],
  LET(
    opts, IF(ISOMITTED(opts), "", LOWER(opts)),
    is_horizontal, OR(
      ISNUMBER(SEARCH("horizontal=true", opts)),
      ISNUMBER(SEARCH("mode=horizontal", opts))
    ),

    // Determine count of elements
    n, COUNTA(range),

    // Build reversed sequence
    reversed, IF(
      is_horizontal,
      HSTACK(INDEX(range, SEQUENCE(1, n, n, -1))),
      VSTACK(INDEX(range, SEQUENCE(n, , n, -1)))
    ),

    reversed
  )
)
;


/* LIST_REPEAT_VALUES
   Purpose:
   Repeats each item in a given list a fixed number of times, in order.

   Inputs:
   - inputRange   : A 1D array or range of values to repeat
   - repeatCount  : Number of times each item should be repeated

   Output:
   - A single-column array with each item repeated `repeatCount` times

   Example:
   LIST_REPEAT_VALUES({"A", "B", "C"}, 3) → {"A"; "A"; "A"; "B"; "B"; "B"; "C"; "C"; "C"}
*/

LIST_REPEAT_VALUES = LAMBDA(inputRange, repeatCount,
  LET(
    totalItems, COUNTA(inputRange) * repeatCount,
    // Generate the repeated sequence using a ceiling-based row index pattern
    output, MAKEARRAY(totalItems, 1,
      LAMBDA(row, col, INDEX(inputRange, CEILING(row / repeatCount, 1)))
    ),
    output
  )
)
;

/* LIST_SEQUENCE_REPEAT
   Purpose:
   Creates a numeric sequence from start to end, repeating each number a specified number of times.

   Inputs:
   - start  : Starting value of the sequence (inclusive)
   - end    : Ending value of the sequence (inclusive)
   - repeat : Number of times to repeat each item in the sequence

   Output:
   - A single-column array containing each number repeated `repeat` times

   Example:
   LIST_SEQUENCE_REPEAT(1, 3, 2) → {1; 1; 2; 2; 3; 3}
*/

LIST_SEQUENCE_REPEAT = LAMBDA(start, end, repeat,
  LET(
    len, ABS(end - start) + 1,
    step, IF(end >= start, 1, -1),
    base, SEQUENCE(len,,start,step),
    total, len * repeat,
    // Repeat each value in the sequence using a repeating index pattern
    output, MAKEARRAY(total, 1,
      LAMBDA(row, col, INDEX(base, CEILING(row / repeat, 1)))
    ),
    output
  )
);



/* LIST_SPLIT_DIGITS
   Purpose:
   Extracts all digit characters (0–9) from a text string and returns them as a numeric array.

   Inputs:
   - input : Text string potentially containing digit characters
   - [mode]: Optional. Output orientation
       0 (default) = vertical array
       1 = horizontal array

   Behavior:
   - Non-digit characters are ignored (not replaced with zero or NA)
   - Digits are returned as numbers (not strings)
   - Output orientation controlled by [mode]

   Examples:
   LIST_SPLIT_DIGITS("Room 42B")         → {4; 2}
   LIST_SPLIT_DIGITS("abc123", 1)        → {1, 2, 3}
   LIST_SPLIT_DIGITS("abc")              → {} (empty array)

   See also:
   - STR_GETDIGITS for a compact string output of the digits
*/

LIST_SPLIT_DIGITS = LAMBDA(input, [mode],
  LET(
    mode, IF(OR(ISOMITTED(mode), mode > 1), 0, mode),
    arr_chars, MID(input, SEQUENCE(LEN(input)), 1),
    arr_digits, IF(ISNUMBER(VALUE(arr_chars)), VALUE(arr_chars), NA()),
    arr_filtered, FILTER(arr_digits, ISNUMBER(arr_digits)),
    result, SWITCH(mode, 1, arr_filtered, 0, TRANSPOSE(arr_filtered)),
    result
  )
)
;

/* LIST_FROM_STRING
   Purpose:
   Converts a delimited text string into a list (vertical or horizontal array).

   Inputs:
   - text      : The input string to split
   - delimiter : The character or string used to separate values
   - [mode]    : Optional. Output orientation
       0 (default) = vertical array
       1 = horizontal array

   Behavior:
   - Uses TEXTSPLIT to parse the input into values
   - Supports horizontal or vertical output shape
   - Trims and preserves order of values

   Examples:
   LIST_FROM_STRING("apple,banana,carrot", ",")    → {"apple"; "banana"; "carrot"}
   LIST_FROM_STRING("1;2;3;4", ";", 1)             → {1, 2, 3, 4}

   See also:
   - LIST_FORMAT_AS_STRING (inverse operation)
   - STR_SPLITCHARS (character-level splitting)
*/

LIST_FROM_STRING = LAMBDA(text, delimiter, [mode],
  LET(
    mode, IF(OR(ISOMITTED(mode), mode = 0), "C", "R"),
    split, TEXTSPLIT(text, delimiter),
    IF(mode = "R", split, TRANSPOSE(split))
  )
)
;

/* LIST_ENUMERATE
   Purpose:
   Returns a two-column array pairing each item in a list with its index.

   Inputs:
   - list : A vertical or horizontal array of values

   Output:
   - A two-column array:
       Column 1 = index (1-based)
       Column 2 = corresponding value from the list

   Behavior:
   - Preserves the order of items
   - Automatically flattens the input to a single column for enumeration

   Examples:
   LIST_ENUMERATE({"A", "B", "C"}) →
     {1, "A";
      2, "B";
      3, "C"}

   LIST_ENUMERATE(HSTACK("apple", "banana", "cherry")) →
     {1, "apple";
      2, "banana";
      3, "cherry"}
*/

LIST_ENUMERATE = LAMBDA(list,
  LET(
    arr, TOCOL(list, 3),
    count, ROWS(arr),
    indexes, SEQUENCE(count),
    HSTACK(indexes, arr)
  )
)
;

/* LIST_ZIP
   Purpose:
   Combines two lists into a two-column array, pairing elements by position.

   Inputs:
   - arr_1 : First array or list (vertical or horizontal)
   - arr_2 : Second array or list (vertical or horizontal)
   - [mode]: Optional. Pairing mode:
       "PAD" (default) = pad shorter array with NA() to match longer
       "TRC"           = truncate both arrays to shortest length

   Behavior:
   - Automatically flattens both arrays into columns
   - Preserves order
   - Ensures both arrays are the same length using selected mode

   Examples:
   LIST_ZIP({"A", "B"}, {1, 2}) →
     {"A", 1;
      "B", 2}

   LIST_ZIP({"A", "B", "C"}, {1, 2}, "PAD") →
     {"A", 1;
      "B", 2;
      "C", #N/A}

   LIST_ZIP({"A", "B", "C"}, {1, 2}, "TRC") →
     {"A", 1;
      "B", 2}
*/

LIST_ZIP = LAMBDA(arr_1, arr_2, [mode],
  LET(
    mode, IF(ISOMITTED(mode), "PAD", UPPER(mode)),
    a_1, TOCOL(arr_1, 3),
    a_2, TOCOL(arr_2, 3),
    len_1, ROWS(a_1),
    len_2, ROWS(a_2),

    padCount, IF(mode = "PAD", MAX(len_1, len_2), MIN(len_1, len_2)),

    // Pad shorter array with NA() if needed
    pada_1, IF(len_1 < padCount, VSTACK(a_1, MAKEARRAY(padCount - len_1, 1, LAMBDA(r,c, NA()))), a_1),
    pada_2, IF(len_2 < padCount, VSTACK(a_2, MAKEARRAY(padCount - len_2, 1, LAMBDA(r,c, NA()))), a_2),

    zipped, HSTACK(
      IF(mode = "PAD", pada_1, INDEX(a_1, SEQUENCE(padCount))),
      IF(mode = "PAD", pada_2, INDEX(a_2, SEQUENCE(padCount)))
    ),

    zipped
  )
)
;


/* LIST_GRID
   Purpose:
   Returns the Cartesian product of two lists as a two-column array,
   pairing every item in the first list with every item in the second.

   Inputs:
   - arr_1 : First array or list (horizontal or vertical)
   - arr_2 : Second array or list (horizontal or vertical)

   Output:
   - A two-column array with every combination of arr_1 × arr_2

   Behavior:
   - Flattens both arrays to 1D columns
   - Preserves order
   - Output will have ROWS(arr_1) × ROWS(arr_2) total rows

   Example:
   LIST_GRID({"A", "B"}, {1, 2, 3}) →
     {"A", 1;
      "A", 2;
      "A", 3;
      "B", 1;
      "B", 2;
      "B", 3}
*/

LIST_GRID = LAMBDA(arr_1, arr_2,
  LET(
    arr_1_flat, TOCOL(arr_1, 3),
    arr_2_flat, TOCOL(arr_2, 3),
    len_1, ROWS(arr_1_flat),
    len_2, ROWS(arr_2_flat),
    total, len_1 * len_2,

    // Use MAKEARRAY to construct the Cartesian product
    output, MAKEARRAY(total, 2,
      LAMBDA(r, c,
        LET(
          i_1, QUOTIENT(r - 1, len_2) + 1,
          i_2, MOD(r - 1, len_2) + 1,
          IF(c = 1, INDEX(arr_1_flat, i_1), INDEX(arr_2_flat, i_2))
        )
      )
    ),

    output
  )
)
;

/* LIST_INVERT
   Purpose:
   Flips a 2D table by rows, columns, or both (mirror-like inversion).

   Inputs:
   - table : A 2D array or range
   - [mode]: Optional. Inversion mode (default: "ROWS")
       "ROWS" → Flip vertically (top-to-bottom)
       "COLS" → Flip horizontally (left-to-right)
       "BOTH" → Flip both rows and columns

   Behavior:
   - Preserves 2D shape
   - Flips based on the selected direction
   - Does not flatten or transpose

   Examples:
   LIST_INVERT({{"A","B";"C","D"}}, "ROWS") →
     {"C","D";
      "A","B"}

   LIST_INVERT({{"A","B";"C","D"}}, "COLS") →
     {"B","A";
      "D","C"}

   LIST_INVERT({{"A","B";"C","D"}}, "BOTH") →
     {"D","C";
      "B","A"}
*/

LIST_INVERT = LAMBDA(table, [mode],
  LET(
    mode, IF(ISOMITTED(mode), "ROWS", UPPER(mode)),
    rows, ROWS(table),
    cols, COLUMNS(table),

    flipped, SWITCH(
      mode,
      "ROWS", INDEX(table, SEQUENCE(rows, , rows, -1), SEQUENCE(1, cols)),
      "COLS", INDEX(table, SEQUENCE(rows), SEQUENCE(1, cols, cols, -1)),
      "BOTH", INDEX(table, SEQUENCE(rows, , rows, -1), SEQUENCE(1, cols, cols, -1)),
      table
    ),

    flipped
  )
)
;

/* LIST_WRAP
   Purpose:
   Rotates a list by N positions with wraparound, preserving all values.

   Inputs:
   - list : A vertical or horizontal array to wrap
   - n    : Number of positions to wrap
       Positive → wrap right/down
       Negative → wrap left/up

   Behavior:
   - Flattens the list to a 1D array
   - Wraps elements circularly by N positions
   - Output orientation matches input

   Examples:
   LIST_WRAP({"A","B","C","D"}, 1) → {"D","A","B","C"}
   LIST_WRAP({1,2,3,4}, -2) → {3,4,1,2}

   See also:
   - LIST_COPY_REVERSE
   - LIST_ROTATE (alternate name)
*/

LIST_WRAP = LAMBDA(list, n,
  LET(
    flat, TOCOL(list, 3),
    len, ROWS(flat),
    steps, MOD(n, len),
    wrapped, INDEX(flat, SEQUENCE(len,,len - steps + 1, 1)),
    IF(COLUMNS(list) > 1, TRANSPOSE(wrapped), wrapped)
  )
)
;


/* LIST_N
   Purpose:
   Returns a list of a single repeated value.

   Inputs:
   - value : The value to repeat
   - count : Number of times to repeat it
   - [mode]: Optional. Output orientation
       0 (default) = vertical list
       1 = horizontal list

   Behavior:
   - Works with text, numbers, logicals, and error values
   - Returns a uniform list of the specified length
   - Supports output as a column or row

   Examples:
   LIST_N("X", 3)       → {"X"; "X"; "X"}
   LIST_N(1, 4, 1)      → {1, 1, 1, 1}
   LIST_N(TRUE, 2)      → {TRUE; TRUE}
*/

LIST_N = LAMBDA(value, count, [mode],
  LET(
    mode, IF(ISOMITTED(mode), 0, mode),
    vector, INDEX(SEQUENCE(1,,1,0)+0*SEQUENCE(count),1)*0+value,
    IF(mode = 1, TRANSPOSE(vector), vector)
  )
)
;

/* LIST_FILTER_INDEXED
   Purpose:
   Returns items from a list based on a list of index positions (1-based).

   Inputs:
   - list    : A 1D array or range of values
   - indexes : A list of numeric positions (1-based)

   Behavior:
   - Retrieves elements from `list` at the specified index positions
   - Ignores list orientation (automatically flattens)
   - Output matches index order

   Examples:
   LIST_FILTER_INDEXED({"A","B","C","D"}, {1,3}) → {"A"; "C"}
   LIST_FILTER_INDEXED(A1:A10, {2,4,6}) → values from those rows

   See also:
   - LIST_ENUMERATE
   - LIST_DUPES_TABLE
   - INDEX
*/

LIST_FILTER_INDEXED = LAMBDA(list, indexes,
  LET(
    flat, TOCOL(list, 3),
    result, INDEX(flat, indexes),
    result
  )
)
;


/* LIST_IS_DISTINCT
   Purpose:
   Returns TRUE if all values in the list are unique (no duplicates), FALSE otherwise.

   Inputs:
   - list : A 1D or 2D range of values

   Behavior:
   - Flattens input to a single column
   - Compares count of total vs. unique items
   - Returns TRUE if they match, FALSE if duplicates exist

   Examples:
   LIST_IS_DISTINCT({"A","B","C"}) → TRUE
   LIST_IS_DISTINCT({"A","B","A"}) → FALSE

   See also:
   - LIST_DUPES_TABLE
   - LIST_FILTER_INDEXED
   - UNIQUE
*/

LIST_IS_DISTINCT = LAMBDA(list,
  LET(
    flat, TOCOL(list, 3),
    result, COUNTA(flat) = COUNTA(UNIQUE(flat)),
    result
  )
)
;