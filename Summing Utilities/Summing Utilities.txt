
/* SUM_N_TERMS:
   Purpose: Calculates the sum of an arithmetic progression.
   Returns: Total sum of the sequence (scalar) or its upper bound if mode = 1.

   Parameters:
   - lbound (required): The starting value of the sequence.
   - length (required): The number of items in the sequence.
   - increment (optional): Step between values (default is 1).
   - mode (optional): 0 = return sum (default), 1 = return upper bound only.

   Notes:
   - Uses the arithmetic series formula.
   - Useful for calculating uniform intervals in controlled progressions.

   Example:
   SUM_N_TERMS(4, 15, 5) → 585
   (Sums 4 + 9 + 14 + ... + 74, incrementing by 5)
*/

SUM_N_TERMS = LAMBDA(lbound, length, [increment], [mode],
    LET(
        mode, IF(OR(ISOMITTED(mode), mode > 1), 0, mode),             /* Default mode = 0 (sum) */
        increment, IF(ISOMITTED(increment), 1, increment),            /* Default increment = 1 */
        ubound, lbound + (length - 1) * increment,                    /* Calculate upper bound of the series */
        total, (length / 2) * ((2 * lbound) + ((length - 1) * increment)), /* Arithmetic progression sum formula */
        SWITCH(mode,
            0, total,     /* Return full sum */
            1, ubound     /* Return upper bound only */
        )
    )
);


/* SUM_INTEGERS:
   Purpose: Calculates the sum of natural, even, or odd numbers up to a given value.
   Returns: Sum of numbers from 1 to n, or only even/odd numbers, depending on mode.

   Parameters:
   - input (required): Upper limit of summation.
   - mode (optional): 
     0 = sum of all integers from 1 to input (default),
     1 = sum of all even numbers ≤ input,
     2 = sum of all odd numbers ≤ input.

   Notes:
   - Uses closed-form formulas for performance.
   - Designed for quick access to basic sequence sums.

   Example:
   SUM_INTEGERS(10) → 55  (1+2+3+...+10)
   SUM_INTEGERS(10, 1) → 30  (2+4+6+8+10)
   SUM_INTEGERS(10, 2) → 25  (1+3+5+7+9)
*/

SUM_INTEGERS = LAMBDA(input, [mode],
    LET(
        mode, IF(OR(ISOMITTED(mode), mode > 2), 0, mode),    /* Default to mode 0 (all integers) */
        
        even_ubound, IF(ISEVEN(input), input, input - 1),     /* Nearest even ≤ input */
        odd_ubound, IF(ISODD(input), input, input - 1),       /* Nearest odd ≤ input */
        
        output, SWITCH(
            mode,
            0, (input * (input + 1)) / 2,                     /* Sum of all integers from 1 to n */
            1, (even_ubound * (even_ubound + 2)) / 4,         /* Sum of even numbers: n(n+2)/4 */
            2, ((odd_ubound + 1) / 2) ^ 2                     /* Sum of odd numbers: ((n+1)/2)^2 */
        ),
        output
    )
);

/* SUM_RANGE:
   Purpose: Calculates the sum of an arithmetic series, either by specifying a full range
            (lower and upper bounds and optional increment) or just a single upper bound
            for a 1-to-n sum.

   Returns: A single number representing the arithmetic sum.

   Parameters:
   - lbound (required): Lower bound of the sequence. If `ubound` is omitted, treated as 1.
   - ubound (optional): Upper bound of the sequence. If omitted, `lbound` is treated as the upper bound and 1 is used as the lower bound.
   - increment (optional): The amount to increase each step by (default = 1).

   Notes:
   - Handles both ascending and descending sequences.
   - Can be used as a direct replacement for SERIES_SUM and SUM_INTEGERS with `increment = 1`.

   Example:
   SUM_RANGE(1, 10) → 55
   SUM_RANGE(3, 15, 3) → 45 (3 + 6 + 9 + 12 + 15)
   SUM_RANGE(10) → 55 (same as SUM_RANGE(1, 10))
*/

SUM_RANGE = LAMBDA(lbound, [ubound], [increment],
    LET(
        // Handle default usage: SUM_RANGE(10) → sum 1 to 10
        ubound_internal, IF(ISOMITTED(ubound), lbound, ubound),
        lbound_internal, IF(ISOMITTED(ubound), 1, lbound),

        // Default increment is 1 if omitted
        step, IF(ISOMITTED(increment), 1, increment),

        // Calculate number of terms in the sequence (inclusive)
        length, TRUNC((ubound_internal - lbound_internal) / step) + 1,

        // Apply arithmetic series formula:
        // sum = (n / 2) * (2a + (n - 1)d)
        total, (length / 2) * ((2 * lbound_internal) + ((length - 1) * step)),

        total
    )
);


/* SUM_BETWEEN_BOUNDS:
   Purpose:
   Returns the sum of an arithmetic sequence starting from a lower bound and increasing by a fixed increment up to an upper bound.

   Returns:
   A scalar value representing the total of all valid terms in the range.

   Parameters:
   - lbound (required): The starting value of the sequence.
   - ubound (optional): The maximum value the sequence may reach (default = lbound, i.e., single-term sum).
   - increment (optional): The step size between terms (default = 1).

   Notes:
   - If only lbound is provided, returns that value (single term).
   - If increment is omitted, defaults to 1.
   - Uses the arithmetic series sum formula to avoid iteration.
   - Result reflects only full steps that do not exceed the upper bound.

   Example:
   SUM_BETWEEN_BOUNDS(4, 20, 3) → 69
   (Sums: 4 + 7 + 10 + 13 + 16 + 19)
*/

SUM_BETWEEN_BOUNDS = LAMBDA(lbound, [ubound], [increment],
    LET(
        // Default to single term if ubound is omitted
        u_bound, IF(ISOMITTED(ubound), lbound, ubound),

        // Default lbound to 1 if only one argument was passed (for symmetry)
        lbound, IF(ISOMITTED(ubound), 1, lbound),

        // Default increment to 1 if omitted
        increment, IF(ISOMITTED(increment), 1, increment),

        // Calculate the number of terms in the sequence that do not exceed u_bound
        length, TRUNC((u_bound - lbound) / increment) + 1,

        // Use arithmetic series sum formula
        total, (length / 2) * ((2 * lbound) + ((length - 1) * increment)),

        total
    )
);


