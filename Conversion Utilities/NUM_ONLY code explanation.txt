NUMNOTE_NUM_ONLY = LAMBDA(input, [asText],
    LET(
        chars, MID(input, SEQUENCE(LEN(input)), 1),
        isNumeric, ISNUMBER(VALUE(chars) + (chars = ".")),
        numericPos, FILTER(SEQUENCE(LEN(input)), isNumeric),

        firstDigit, MIN(numericPos),
        lastDigit, MAX(numericPos),
        rawExtract, MID(input, firstDigit, lastDigit - firstDigit + 1),

        result, IF(
            OR(ISOMITTED(asText), asText = FALSE),
            VALUE(rawExtract),
            rawExtract
        ),
        result
    )
)

input = "F5.6V"

NUMNOTE_NUM_ONLY = LAMBDA(input, [asText],
    LET(
    
    // BEGIN "LONGHAND" BLOCK
    
    /* THIS BLOCK CONTAINS THE CODE TO PRODUCE THE SAME
        RESULTS AS IN THE "SHORTHAND" BLOCK BELOW IT. */
        
       chars, MID(input, SEQUENCE(LEN(input)), 1),
       		// chars now holds an array: {"F"; "5"; "."; "6"; "V"} 
       
       test_1, value(chars),
       		// test_1 now holds an array: {#VALUE!; 5; #VALUE!; 6; #VALUE!}
       
       test_2, chars = ".",
       		// test_2 now holds an array: {FALSE; FALSE; TRUE; TRUE; FALSE}
       
       test_3, test_1 + test_2,
       		// when the two arrays are added, test_2 is "coerced" by Excel's logic into the form: {0; 0; 1; 0; 0}
		// so that 
			//    {#VALUE!; 5; #VALUE!; 6; #VALUE!}
			// + {            0; 0;              1; 0;              0}
			// ----------------------------------------------------
			//    {#VALUE!; 5;              1; 6; #VALUE!}
       		// test_3 now holds an array: {#VALUE!; 5; 1; 6; #VALUE!}
       
       isNumeric, ISNUMBER(test_3),
       		// ISNUMBER tests each value in the array test_3 to see if it is a number
		// and returns TRUE if it is and FALSE if it isn't, so that 
       		// isNumeric now holds an array: {FALSE; TRUE; TRUE; TRUE; FALSE}
       
       numericPos, FILTER(chars, isNumeric),
       		/* FILTER treats chars and isNumeric as columns in a table
		   and goes down the rows of the table and only returns a value
		   from the chars column in a given row if the isNumeric column on that row
		   contains TRUE, so
		   numericPos now contains an array {2; 3; 4}
		*/
    // END "LONGHAND" BLOCK
       
    /* "SHORTHAND" BLOCK
       isNumeric, ISNUMBER(VALUE(chars) + (chars = ".")),
       		/* this single line of code accomplishes the same result as all of the code
		   in the "LONGHAND" block above by doing all of the array builds and
		   comparisons "behind the scenes" and simply returning the final result.
		*/
       numericPos, FILTER(SEQUENCE(LEN(input)), isNumeric),
    */

        firstDigit, MIN(numericPos),
        		// firstDigit now holds the numeric value 2, the position in the input string
		   of the first character which is a digit
        lastDigit, MAX(numericPos),
        		// lastDigit now holds the numeric value 4, the position in the input string
		   of the last character which is a digit
        rawExtract, MID(input, firstDigit, lastDigit - firstDigit + 1),
        		/* MID takes the original input "F5.6V" and only returns the characters
		    starting with firstDigit (= 2) and and continuing for lastDigit (= 4 - 2 + 1 = 3)
		    characters; i. e. MID("F5.6V", 2, 3); so rawExtract now contains the string "5.6"
		 */
	
        result, IF(
            OR(ISOMITTED(asText), asText = FALSE), // if no value is submitted for asText or the submitted value is FALSE
            VALUE(rawExtract),                                      // then return the numeric value of the string "5.6"
            rawExtract                                                     // otherwise, return the string "5.6"
        ),
        result       // present the result to the user
    )
);