/*
STAT_QNTILES
Returns equally spaced quantiles from a numeric range, with optional labels and bin-style slicing.

Arguments:
- range       — Numeric input range (e.g., A1:A100)
- [divisions] — (optional) Number of quantile intervals (default = 10)
- [mode]      — (optional) Use "LBL" to return labeled 2-column output (default = values only)
- [style]     — (optional) "ALL" (default) includes 0% and 100%; "BIN" excludes both boundaries
- [precision] — (optional) Decimal rounding precision (default = 3)

Returns:
- A vertical list of quantile values, or a 2-column labeled array, depending on mode.

Examples:
- STAT_QNTILES(A1:A100)                     → Deciles
- STAT_QNTILES(A1:A100, 4, "LBL")           → Quartiles with labels
- STAT_QNTILES(A1:A100, 10, , "BIN")        → Internal bin boundaries (10-tiles)
- STAT_QNTILES(A1:A100, 20, "LBL", "BIN", 2) → Labeled bin cuts with 2-digit rounding
*/

STAT_QNTILES = LAMBDA(range, [divisions], [mode], [style], [precision],
    LET(
        // Normalize optional arguments
        divisions, IF(ISOMITTED(divisions), 10, divisions),
        mode, IF(ISOMITTED(mode), "", UPPER(mode)),
        style, IF(ISOMITTED(style), "ALL", UPPER(style)),
        precision, IF(ISOMITTED(precision), 3, precision),

        // Validation
        countVals, COUNT(range),
        isValid, ISNUMBER(divisions) * ISNUMBER(precision),

        IF(countVals = 0, SQRT("a"),
            IF(OR(NOT(isValid), divisions < 1), SQRT(-1),

                LET(
                    // Percentile cut points based on style
                    pctiles, SWITCH(
                        style,
                        "BIN", SEQUENCE(divisions - 1, 1, 1) / divisions,
                        SEQUENCE(divisions + 1, 1, 0) / divisions  // Default = ALL
                    ),

                    // Label formatting
                    pct_labels, TEXT(pctiles, "0%"),

                    // Calculate quantile values
                    pct_vals, ROUND(PERCENTILE.INC(range, pctiles), precision),

                    // Output formatting
                    IF(mode = "LBL",
                        CHOOSE({1, 2}, pct_labels, VALUE(pct_vals)),
                        TOCOL(pct_vals)
                    )
                )
            )
        )
    )
);


/* STAT_STDERR

Returns the standard error of the mean (SEM) for a numeric array.

Arguments:
- array     = The dataset to evaluate
- mode      = Optional; "pop" for population (default), "samp" for sample
- label     = Optional; "LBL" to return a labeled string, otherwise returns numeric
- precision = Optional; number of decimal places to round result (default: 3)

Notes:
- Standard error reflects the expected variability of the sample mean, assuming the data represents a random sample.
- If the dataset represents the entire population, SEM is mathematically valid but not practically necessary—it models error that doesn’t exist.

Example:
=STAT_STDERR(A1:A100, "samp", "LBL", 2)
→ "Standard Error: 1.27"
*/

STAT_STDERR = LAMBDA(array, [mode], [label], [precision],
    LET(
        precision, IF(ISOMITTED(precision), 3, precision),
        label, IF(ISOMITTED(label), "", label),
        mode, IF(ISOMITTED(mode), "pop", LOWER(mode)),

        // Compute standard error based on mode
        stderr, SWITCH(
            mode,
            "pop", STDEV.P(array) / SQRT(COUNTA(array)),
            "samp", STDEV.S(array) / SQRT(COUNTA(array)),
            STDEV.P(array) / SQRT(COUNTA(array))  // fallback
        ),

        result, ROUND(stderr, precision),

        IF(label = "lbl", "Standard Error: " & result, result)
    )
);



/* STAT_MINMAX

Returns the minimum and maximum of a numeric array, optionally labeled as a two-column array.

Arguments:
- array  = The dataset to evaluate
- prec   = Optional; number of decimal places to round result (default: 3)
- label  = Optional; "LBL" returns two-column output with text and numeric values
- layout = Optional; "H" for horizontal, "V" for vertical (default: "V")

Returns:
- Default: {min; max} numeric array
- If label = "LBL": 
    Min     | value  
    Max     | value  
- Layout mode affects orientation only if label ≠ "LBL"

*/

STAT_MINMAX = LAMBDA(array, [prec], [label], [layout],
    LET(
        prec, IF(ISOMITTED(prec), 3, prec),
        label, IF(ISOMITTED(label), "", UPPER(label)),
        layout, IF(ISOMITTED(layout), "V", UPPER(layout)),

        min_val, ROUND(MIN(array), prec),
        max_val, ROUND(MAX(array), prec),

        result_lbl, VSTACK(
            HSTACK("Min", min_val),
            HSTACK("Max", max_val)
        ),

        result_raw, IF(layout = "H",
            HSTACK(min_val, max_val),
            VSTACK(min_val, max_val)
        ),

        IF(label = "LBL", result_lbl, result_raw)
    )
);

/* STAT_SUMMARY

Provides a concise statistical summary for a numeric array.

Arguments:
- range  = The dataset to evaluate
- mode   = Optional; "SMRY" or "SPAN" (default: SPAN)
           SMRY: Min, Mean, Median, Max, Stdev
           SPAN: Min, μ−σ, Mean, μ+σ, Max, Stdev
- label  = Optional; "LBL" returns a two-column labeled array
- prec   = Optional; number of decimal places (default: 3)

Returns:
- A vertical numeric array or labeled matrix depending on mode and label flag

Mode Descriptions:
- "SMRY": Balanced snapshot of center and spread
- "SPAN": Emphasizes distribution shape around the mean (μ ± σ),
          with clear labeling of Mean (μ) and Stdev (σ) only

*/

STAT_SUMMARY = LAMBDA(range, [mode], [label], [prec],
    LET(
        raw_mode, IF(ISOMITTED(mode), "SPAN", UPPER(mode)),
        mode, IF(OR(raw_mode = "SMRY", raw_mode = "SPAN"), raw_mode, 1/0),

        label, IF(ISOMITTED(label), "", UPPER(label)),
        prec, IF(ISOMITTED(prec), 3, prec),

        μ, AVERAGE(range),
        σ, STDEV.P(range),
        min_val, MIN(range),
        max_val, MAX(range),
        med_val, MEDIAN(range),
        μ_minus_σ, μ - σ,
        μ_plus_σ, μ + σ,

        // Summary mode: Min, Mean, Median, Max, Stdev
        smry_vals, VSTACK(
            min_val,
            μ,
            med_val,
            max_val,
            σ
        ),
        smry_labels, VSTACK("Min", "Mean (μ)", "Median", "Max", "Stdev (σ)"),

        // Span mode: Min, μ−σ, Mean, μ+σ, Max, σ
        span_vals, VSTACK(
            min_val,
            μ_minus_σ,
            μ,
            μ_plus_σ,
            max_val,
            σ
        ),
        span_labels, VSTACK("Min", "μ − σ", "Mean (μ)", "μ + σ", "Max", "Stdev (σ)"),

        selected_vals, IF(mode = "SPAN", span_vals, smry_vals),
        selected_labels, IF(mode = "SPAN", span_labels, smry_labels),

        rounded_vals, ROUND(selected_vals, prec),

        result, IF(label = "LBL",
            HSTACK(selected_labels, rounded_vals),
            rounded_vals
        ),

        result
    )
);

/* STAT_GEO5

Returns a geometric five-point summary of a numeric range.

This is NOT a percentile-based summary (like quartiles),
but a symmetric positional scaffold across the Min–Max span.

Arguments:
- range   : Required array of numeric values
- label   : Optional; use "LBL" for labeled 2-column output (default: unlabeled)
- prec    : Optional; number of decimal places (default: 3)

Returns:
- A vertical numeric array or labeled matrix including:
  {Min, Lower Mid, Midrange, Upper Mid, Max}

Formulas:
- Min         = MIN(range)
- Midrange    = (MIN + MAX) / 2
- Lower Mid   = (MIN + Midrange) / 2
- Upper Mid   = (Midrange + MAX) / 2
- Max         = MAX(range)

Note:
- This function is **distribution-agnostic**. It reports numeric position only, 
  without regard to the frequency or clustering of values. That means datasets 
  with highly skewed or repetitive values may still yield evenly spaced results 
  if Min and Max remain the same. It is best understood as a *symmetry scaffold*, 
  not a distributional analysis.

*/

STAT_GEO5 = LAMBDA(range, [label], [prec],
    LET(
        label, IF(ISOMITTED(label), "", UPPER(label)),
        prec, IF(ISOMITTED(prec), 3, prec),

        min_val, MIN(range),
        max_val, MAX(range),
        midrange, (min_val + max_val) / 2,
        lower_mid, (min_val + midrange) / 2,
        upper_mid, (midrange + max_val) / 2,

        raw_vals, VSTACK(min_val, lower_mid, midrange, upper_mid, max_val),
        rounded_vals, ROUND(raw_vals, prec),

        labels, VSTACK("Min", "Lower Mid", "Midrange", "Upper Mid", "Max"),

        output, IF(label = "LBL", HSTACK(labels, rounded_vals), rounded_vals),

        output
    )
);

/* STAT_VOLUME

Returns basic volumetric stats for a numeric range.

Arguments:
- range   : Required numeric array
- label   : Optional; use "LBL" for labeled 2-column output
- prec    : Optional; number of decimal places (default: 3)

Returns:
- Count
- Sum
- Mean (μ)

*/

STAT_VOLUME = LAMBDA(range, [label], [prec],
    LET(
        label, IF(ISOMITTED(label), "", UPPER(label)),
        prec, IF(ISOMITTED(prec), 3, prec),

        count_val, COUNT(range),
        sum_val, SUM(range),
        mean_val, IF(count_val > 0, AVERAGE(range), NA()),

        raw_vals, VSTACK(count_val, sum_val, mean_val),
        rounded_vals, ROUND(raw_vals, prec),

        labels, VSTACK("Count", "Sum", "Mean (μ)"),

        output, IF(label = "LBL", HSTACK(labels, rounded_vals), rounded_vals),

        output
    )
);

/* STAT_SHAPE

Returns central tendency and shape descriptors for a numeric array.

Arguments:
- range   : Required numeric array
- label   : Optional; use "LBL" for labeled 2-column output
- prec    : Optional; number of decimal places (default: 3)

Returns:
- Mean (μ)
- Median
- Skew.P
- Kurt.P

Note:
- Returns #N/A for Skew or Kurtosis if fewer than 3 values are present.

*/

STAT_SHAPE = LAMBDA(range, [label], [prec],
    LET(
        label, IF(ISOMITTED(label), "", UPPER(label)),
        prec, IF(ISOMITTED(prec), 3, prec),

        count_val, COUNT(range),

        μ, IF(count_val > 0, AVERAGE(range), NA()),
        med, IF(count_val > 0, MEDIAN(range), NA()),
        skew, IF(count_val > 2, SKEW.P(range), NA()),
        kurt, IF(count_val > 3, KURT(range), NA()),

        raw_vals, VSTACK(μ, med, skew, kurt),
        rounded_vals, ROUND(raw_vals, prec),

        labels, VSTACK("Mean (μ)", "Median", "Skew (P)", "Kurtosis (P)"),

        output, IF(label = "LBL", HSTACK(labels, rounded_vals), rounded_vals),

        output
    )
);





/* STAT_MIDRANGE

Returns the midrange of a numeric array: the average of its Min and Max.

Arguments:
- array : required numeric range
- prec  : optional number of decimal places (default = 3)

Returns:
- A single numeric value: (MIN + MAX) / 2

*/

STAT_MIDRANGE = LAMBDA(array, [prec],
    LET(
        prec, IF(ISOMITTED(prec), 3, prec),
        count_val, COUNT(array),
        midrange, IF(count_val = 0, NA(), AVERAGE(MIN(array), MAX(array))),
        ROUND(midrange, prec)
    )
);


/* STAT_FREQ_TABLE

Generates a frequency table from a numeric range.

Arguments:
- range : required numeric input
- mode  : optional keyword ("LBL" to include column headers; default = no headers)

Returns:
- A 3-column spilled array:
    • Column 1: Unique values
    • Column 2: Frequency (count)
    • Column 3: Weighted product (value × count)

Notes:
- Sorted in ascending order
- Includes headers if mode = "LBL"
- Useful for mode analysis, weighted means, and distribution overview

*/

STAT_FREQ_TABLE = LAMBDA(range, [mode],
    LET(
        // Handle label mode
        mode, IF(ISOMITTED(mode), "", UPPER(mode)),

        // Prepare unique values in sorted order
        u_vals, SORT(UNIQUE(range)),

        // Frequency counts per unique value
        weights, BYROW(u_vals, LAMBDA(a, COUNTIF(range, a))),

        // Weighted value × frequency
        products, u_vals * weights,

        // Add column headers if "LBL" mode
        values_col, IF(mode = "LBL", VSTACK("Value", u_vals), u_vals),
        weights_col, IF(mode = "LBL", VSTACK("Weight", weights), weights),
        products_col, IF(mode = "LBL", VSTACK("Product", products), products),

        // Final output
        HSTACK(values_col, weights_col, products_col)
    )
);


/* STAT_WTD_AVG

Returns the weighted average of a value set based on a matching weight set.

Arguments:
- wts    : array of weights
- values : array of values (same length as weights)

Returns:
- Weighted average = SUMPRODUCT(wts, values) / SUM(wts)
- Returns #N/A if input lengths mismatch or weight sum is zero

*/

STAT_WTD_AVG = LAMBDA(wts, values,
    LET(
        len_match, COUNTA(wts) = COUNTA(values),
        total_wt, SUM(wts),
        result, IF(
            NOT(len_match) + (total_wt = 0),
            NA(),
            SUMPRODUCT(wts, values) / total_wt
        ),
        result
    )
);

/* STAT_SELF_WTD_AVG

Returns a self-weighted average of values, where each value is treated as its own weight.

Arguments:
- range : numeric array

Returns:
- Σ(xᵢ²) / Σ(xᵢ)
- Returns #N/A if total sum = 0

*/

STAT_SELF_WTD_AVG = LAMBDA(range,
    LET(
        sum_vals, SUM(range),
        result, IF(sum_vals = 0, NA(), SUMPRODUCT(range, range) / sum_vals),
        result
    )
);


/* STAT_PCT_REMAP

Rescales a value from one numeric range into another, preserving its
relative position (percentile) between the two intervals.

Arguments:
- StartMin, StartMax : original numeric range
- Target             : value within the original range
- EndMin, EndMax     : destination range
- decprec (optional) : decimal precision (default = 15)

Returns:
- The percentile-equivalent value in the second range

Example:
    STAT_PCT_REMAP(3, 11, 5, 2, 19)
    → 6.25 (since 5 is 25% between 3–11, and 6.25 is 25% between 2–19)

*/

STAT_PCT_REMAP = LAMBDA(StartMin, StartMax, Target, EndMin, EndMax, [decprec],
    LET(
        decprec, IF(ISOMITTED(decprec), 15, decprec),
        pct, (Target - StartMin) / (StartMax - StartMin),
        calc, pct * (EndMax - EndMin) + EndMin,
        ROUND(calc, decprec)
    )
);


/* STAT_PCT_OF_RANGE

Returns the percentile (as a decimal fraction) that a value represents
within a specified numeric range.

Arguments:
- min      : lower bound of range
- max      : upper bound of range
- value    : value to evaluate
- decprec  : optional decimal precision (default = 15)

Returns:
- The proportional position of `value` in the range [min, max]

Example:
    STAT_PCT_OF_RANGE(3, 12, 7)
    → 0.444... (because 7 is 44.4% of the way from 3 to 12)

*/

STAT_PCT_OF_RANGE = LAMBDA(min, max, value, [decprec],
    LET(
        decprec, IF(ISOMITTED(decprec), 15, decprec),
        calc, (value - min) / (max - min),
        ROUND(calc, decprec)
    )
);


/* STAT_VALUE_OF_PCT

Returns the value that corresponds to a given percentage (as a decimal) 
within a specified numeric range.

Arguments:
- min      : lower bound of range
- max      : upper bound of range
- pct      : percentage expressed as a decimal (e.g. 0.4065 for 40.65%)
- decprec  : optional decimal precision (default = 15)

Returns:
- The value at the given percentile between min and max

Example:
    STAT_VALUE_OF_PCT(3, 12, 0.4065)
    → 6.6585 (which is 40.65% between 3 and 12)

*/

STAT_VALUE_OF_PCT = LAMBDA(min, max, pct, [decprec],
    LET(
        decprec, IF(ISOMITTED(decprec), 15, decprec),
        calc, pct * (max - min) + min,
        ROUND(calc, decprec)
    )
);


/* STAT_BENFORD_TABLE

Returns the theoretical Benford distribution probabilities for leading digits 1 through 9.

Arguments:
- mode (optional): 
    - "LBL" → returns a 2-column array: Digit | Probability
    - blank/omitted → returns raw probabilities only (1-column)

Returns:
- A vertical list of 9 Benford probabilities (log-based distribution)
- Optionally labeled with digits 1 through 9

Formula:
- P(d) = LOG10(1 + 1/d), for d in {1, 2, ..., 9}

Commonly used for:
- Detecting unnatural patterns in datasets
- Fraud detection and forensic accounting
- Modeling distributions of naturally occurring numerical data

*/

STAT_BENFORD_TABLE = LAMBDA([mode],
    LET(
        mode, IF(ISOMITTED(mode), "", UPPER(mode)),

        // Digits 1 through 9
        digits, SEQUENCE(9, , 1, 1),

        // Benford probabilities
        probs, BYROW(digits, LAMBDA(d, LOG10(1 + (1 / d)))),

        // Optional labeled output
        result, IF(
            mode = "LBL",
            HSTACK(digits, probs),
            probs
        ),

        result
    )
);

/* STAT_RND_BENFORD

Generates one or more random digits based on the Benford distribution.

Arguments:
- digits (optional): number of digits to return (default = 1)

Returns:
- A single-digit number if digits = 1
- A multi-digit number composed of Benford-distributed digits otherwise

Distribution:
- Based on leading digit probabilities:
    P(d) = LOG10(1 + 1/d) for d ∈ {1..9}

*/

STAT_RND_BENFORD = LAMBDA([digits],
    LET(
        digits, IF(ISOMITTED(digits), 1, digits),

        // Digit range 1–9
        numlist, SEQUENCE(9, , 1, 1),

        // Cumulative Benford probabilities
        problist, {0.301, 0.477, 0.602, 0.699, 0.778, 0.845, 0.903, 0.954, 1},

        // Generate random array of percentiles
        rand_nums, RANDARRAY(digits, 1),

        // Match to digit via percentile mapping
        indices, MATCH(XLOOKUP(rand_nums, problist, problist, , 1), problist, 1),
        digits_generated, INDEX(numlist, indices),

        // Output as numeric value
        output, IF(
            digits = 1,
            VALUE(digits_generated),
            VALUE(TEXTJOIN("", TRUE, digits_generated))
        ),

        output
    )
);

/* STAT_VAL_BRACKET

Returns the values in a dataset that bracket a specified target value.

Arguments:
- TestArray : array of numeric values
- Target    : the value to find bracketing bounds for
- incl      : optional, "INC" (default) includes target in result, "EXC" excludes it
- mode      : optional layout:
    "VER" = vertical array (default)
    "HOR" = horizontal array
    "STR" = string format "(lower : [target] : upper)"
- lbl       : optional keyword "LBL" to include labels in output (ignored in "STR" mode)
- prec      : optional decimal precision to round to (default = 3)

Returns:
- The values immediately above and below the target (or also the target, if "INC")
- Output as array (vertical or horizontal), string, or labeled array

*/

STAT_VAL_BRACKET = LAMBDA(TestArray, Target, [incl], [mode], [lbl], [prec],
    LET(
        prec, IF(ISOMITTED(prec), 3, prec),
        mode, UPPER(IF(ISOMITTED(mode), "VER", mode)),
        lbl, UPPER(IF(ISOMITTED(lbl), "", lbl)),
        lbl_val, lbl = "LBL",
        incl, UPPER(IF(ISOMITTED(incl), "INC", incl)),

        // Compute bounding values
        lower, MAX(FILTER(TestArray, TestArray < Target)),
        upper, MIN(FILTER(TestArray, TestArray > Target)),

        // Build value list based on inclusion
        val_array, IF(incl = "INC", VSTACK(lower, Target, upper), VSTACK(lower, upper)),
        val_array_r, ROUND(val_array, prec),

        // Corresponding label list
        lbl_array, IF(incl = "INC",
            {"Lower"; "Target"; "Upper"},
            {"Lower"; "Upper"}
        ),

        // Output selector
        output, SWITCH(
            mode,
            "STR", "(" & TEXTJOIN(" : ", , FIXED(val_array_r, prec)) & ")",
            "HOR", IF(lbl_val,
                VSTACK(TRANSPOSE(lbl_array), TRANSPOSE(val_array_r)),
                TRANSPOSE(val_array_r)
            ),
            "VER", IF(lbl_val,
                HSTACK(lbl_array, val_array_r),
                val_array_r
            ),
            val_array_r  // fallback default
        ),

        output
    )
);



